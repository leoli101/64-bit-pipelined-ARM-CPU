module datapath(Imm9, Imm12, data_b, clk,instr, RegWrite, Reg3Loc, Reg2Loc, is_ADDI, ALUSrc, MemToReg, ALUop, zero, negative, overflow, carry_out);

	input logic clk, RegWrite, Reg3Loc, Reg2Loc, isADDI, ALUSrc;
	input logic[2:0] ALUop;
	input logic[1:0] MemToReg;
	input logic[31:0] instr;
	input logic[8:0] Imm9;
	input logic[11:0] Imm12;
	output logic zero, negative, overflow, carry_out;
	output logic[63:0] data_b;
	
	logic[4:0] reg_2, reg_3;
	
	logic[63:0] data_a, alu_2, alu_result;
	
	mux5x2_1 reg2_loc(.data1_in(instr[4:0]), .data2_in(instr[20:16]), .data_out(reg_2), .sel(Reg2Loc));
	
	mux5x2_1 reg3_loc(.data1_in(instr[4:0]), .data2_in(5'd30), .data_out(reg_3), .sel(Reg3Loc))
	
	regfile RegFile(.ReadRegister1(instr[9:5]), .ReadRegister2(reg_2), .WriteRegister(reg_3), .WriteData(), .ReadData1(data_a), .ReadData2(data_b), .RegWrite, .clk);

	logic[63:0] SE_IMM9, SE_Imm12, SE_out;
	
	SignedExtend #(.WIDTH(9)) se_9(.data_in(Imm9). .data_out(SE_Imm9));
	
	SignedExtend #(.WIDTH(12)) se_12(.data_in(Imm12). .data_out(SE_Imm12));
	
	mux64x2_1 ADDI(.data1_in(SE_Imm9), .data2_in(SE_Imm12), .data_out(SE_out), .sel(is_ADDI));
	
	mux64x2_1 alusrc(.data1_in(data_b), .data2_in(SE_out), .data_out(alu_2), .sel(ALUSrc));
	
	alu(.A(data_a), .B(alu_2), .cntrl(ALUop), .result(alu_result), .negative, .zero, .overflow, .carry_out);
endmodule

module datapath_testbench();
